version: "3.7"

services:
  redis:
    container_name: odf-redis
    image: redis:latest
    restart: always
    ports: # Hide in case of production
      - 6379:6379
    networks:
      - odf-redis
    volumes:
      - redis_data:/var/lib/redis
      
  elasticsearch:
    ports: # Hide in case of production
      - 9200:9200
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.3
    container_name: elasticsearch-odf
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PW}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - elastic-odf
    volumes:
       - elastic_data:/var/lib/elastic
  
  api:
    image: ghcr.io/rades98/odf.api:main
    restart: always
    container_name: odf-api
    ports:
      - "8982:${WEB_API_PORT_HTTP}"
      # - "8981:${WEB_API_PORT}"
    environment:
      ASPNETCORE_ENVIRONMENT: ${DOTNET_ENVIRONMENT}
      # ASPNETCORE_HTTPS_PORT: "${WEB_API_PORT}"
      ASPNETCORE_URLS: "http://*:${WEB_API_PORT_HTTP};" #https://*:${WEB_API_PORT}
      ApiSettings__ApiUrl: "https://127.0.0.1:${WEB_API_PORT_HTTP}"
      ApiSettings__AdminPw: ${ADMIN_PW}
      ElasticsearchSettings__DefaultIndex: "odf-articles"
      ElasticsearchSettings__Nodes__0: http://elasticsearch:9200
      ElasticsearchSettings__Password: "kjKSzpjAeyakMiHesoyAm"
      RedisSettings__Url: "redis:6379"
     
    volumes:
      - ${DOTNET_SECRETS}:/root/.microsoft/usersecrets
      - ${DOCTNET_HTTPS}:/root/.aspnet/https/
    depends_on:
      - elasticsearch
      - redis
    networks:
      - elastic-odf
      - odf-redis
      - webapi-network
      - grafana_stuff

  # certbot:
  #   container_name: odf-certbot
  #   image: certbot/certbot
  #   volumes:
  #     - ./var/lib/certbot/certs:/etc/letsencrypt
  #     - ./var/lib/certbot/www:/var/www/certbot
  #   command: certonly --webroot --webroot-path=/var/www/certbot ${CERTBOT_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME} --staging
  #   depends_on:
  #     - api
  #   networks:
  #     - webapi-network

  prometheus:
    image: prom/prometheus
    restart: always
    container_name: odf-prometheus
    volumes:
      - ./var/lib/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090 #For dev usage only
    depends_on:
      - api
    networks:
      - webapi-network
      - grafana_stuff
    
  grafana:
    image: grafana/grafana:8.1.5
    container_name: odf-grafana
    restart: always
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./var/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./var/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_INSTALL_PLUGINS=simpod-json-datasource
      - GF_DASHBOARDS_JSON_ENABLED=true
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PW}
    depends_on:
      - prometheus
      - elasticsearch
      - api
    networks:
      - grafana_stuff
      - webapi-network
      - elastic-odf

networks:
  elastic-odf:
  odf-redis:
  webapi-network:
  grafana_stuff:
    driver: bridge

volumes:
  elastic_data:
  redis_data:
  grafana_data:

# RTFM
# IN POWERSHELL
# cd .\ODF.API\
# dotnet dev-certs https -ep $env:USERPROFILE\.aspnet\https\ODF.API.pfx -p kjkszpj
# dotnet dev-certs https --trust
# dotnet user-secrets set "Kestrel:Certificates:Development:Password" "kjkszpj"
# cd ../
# docker-compose up -d --build  
# after everything is running, run  docker restart odf-api

#to down
# docker-compose down --remove-orphans

#API LOGIN: admin : heslopyco

#To see logs type to cmd docker logs odf-api

# Grafana is available on 127.0.0.1:3000
#admin_user = admin
#admin_password = lKmTivaSerGjk